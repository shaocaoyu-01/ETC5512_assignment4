panel_education_investment <- panel_education_investment %>%
left_join(province_lookup,
by = c("Region" = "Province"))
panel_education_investment<- panel_education_investment %>%
select(-1) %>%
select(last_col(), everything())
#This data is about the degree of openness.It is the import and export volume of every province.
openness <-
read_excel("data/import_and_export_volume(1996-2023).xlsx") |>
select(-...3) |>
select(-...4)
names(openness)[1] <- "Province_EN"
names(openness)[2] <- "Year"
names(openness)[3] <- "Volume"
# this data is about the geographic information of each province in China,
#to url = https://gadm.org/download_country.html
# choose country =China， level=1.
#it is a html file and i have edited it manually.
province_location <-
read.csv(
"data/province_location.csv"
)
province_location$zone<-
trimws(province_location$zone)
panel_all <-
panel_all |>
right_join(
province_location,
by = "Region"
)
panel_all <- panel_all %>% mutate(Year = as.character(Year))
panel_industry_increase <- panel_industry_increase %>% mutate(Year = as.character(Year))
panel_growth_rate_of_fixed_asset <- panel_growth_rate_of_fixed_asset|> mutate(Year =as.character(Year))
panel_urbanization_rate <- panel_urbanization_rate |> mutate(Year = as.character(Year))
panel_education_investment <- panel_education_investment|>mutate(Year=as.character(Year))
openness <- openness|>mutate(Year =as.character(Year))
panel_all <-
left_join(
panel_all,
panel_industry_increase,
by=c("Region" = "Province_EN",
"Year" )
)
panel_all <-
left_join(
panel_all,
panel_growth_rate_of_fixed_asset,
by =c("Region"= "Province_EN",
"Year")
)
panel_all <-
left_join(
panel_all,
panel_urbanization_rate,
by =c("Region",
"Year")
)
panel_all <-
left_join(
panel_all,
panel_education_investment,
by =c("Region"= "Province_EN",
"Year")
)
panel_all <-
left_join(
panel_all,
openness,
by =c("Region"="Province_EN",
"Year")
)
panel_all <-
panel_all|>
mutate(Year =as.integer(Year))|>
arrange(Region,Year) |>
group_by(Region)|>
mutate(
log_GDP_lag =log(GDP_prev),
log_GDPpc_lag =log(GDPpc_prev),
log_GDP = log(GDP),
log_GDPpc =log(GDP_per_capita)
) |>
ungroup() |>
filter(!is.na(GDP_prev))
panel_all <- panel_all|>
mutate(
Edu_share = Education_investment/GDP,
Trade_share = Volume/GDP
)
panel_all|>
select(GDP_growth_rate,GDP_per_capita_growth_rate,log_GDPpc_lag,ratio,urbanization_rate,Trade_share,Edu_share,growth_rate_of_fixed_asset)|>
summary()
library(tidyr)
library(ggplot2)
# 1. calculate the average number of the whole country
national_avg <- panel_all %>%
group_by(Year) %>%
summarize(
gdp_avg = mean(GDP, na.rm = TRUE),
gdp_pc_avg = mean(GDP_per_capita, na.rm = TRUE)
)
# 2. extract some typical provinces to make a sample
provs <- c("Henan", "Shandong", "Guizhou", "Liaoning")
df_sub <- panel_all %>% filter(Region %in% provs)
# 3. Combine provincial data and national average into the same long format
df_plot <- bind_rows(
df_sub %>% select(Region, Year, value = GDP_per_capita) %>% mutate(type = Region),
national_avg %>% select(Year, value = gdp_pc_avg) %>% mutate(province = "National", type = "National")
)
# 4. draw plots
p1 <- ggplot(df_plot, aes(x = Year, y = value, color = type)) +
geom_line(size = 1) +
geom_point(size = 2) +
labs(
title = "Time series comparison of GDPpc of typical provinces",
x = "Year",
y = "GDP_per_capita(10 thousand Yuan)",
color = ""
) +
scale_color_manual(values = c("National" = "black", "Henan" = "#1b9e77",
"Shandong" = "#d95f02", "Guizhou" = "#7570b3", "Liaoning" = "#e7298a")) +
theme_minimal(base_size = 14)  +
theme(
axis.text.x = element_text(angle = 45, hjust = 1)
)
print(p1)
# 1. We extract a year's data, like 2020.
df2020 <- panel_all |>
filter(Year %in% 2020)|>
arrange(Region, Year) |>
group_by(Region) |>
mutate(gdp_lag = lag(GDP)) |>
ungroup()
# 2. Draw a plot
p2 <- ggplot(df2020, aes(x = log(gdp_lag), y = GDP_per_capita_growth_rate, color = zone)) +
geom_point(size = 3, alpha = 0.8) +
stat_smooth(method = "lm", se = FALSE, linetype = "dashed") +
# Add a linear regression line
stat_poly_eq(
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
formula = y ~ x, parse = TRUE, size = 3
) +
scale_color_brewer(type = "qual", palette = "Set1") +
labs(
title = "The GDPpc_lag vs GDPpc growth rate for 2020",
x = "Logarithm of GDP in the previous year",
y = "Year-on-year GDP_per_capita growth rate (%)",
color = "zone"
) +
theme_minimal(base_size = 14)
print(p2)
# 1. Read and project provincial boundaries
china_sf <- st_read("data/gadm41_CHN_shp/gadm41_CHN_1.shp") %>%
st_transform(4326)
names(china_sf)
panel_for_map <- panel_all|> select(Region,GDP_per_capita,Year,GDP_per_capita_growth_rate)
library(dplyr)
panel_for_map <-
panel_for_map |>
mutate(Region = as.character(Region)) |>
mutate(
Region=dplyr::recode(Region,
"Xinjiang"= "Xinjiang Uygur" ,
"Tibet" = "Xizang" ,
"Inner Mongolia"=  "Nei Mongol",
"Ningxia" ="Ningxia Hui",
.default          = Region
))
# 2. Combine panel data and spatial data to obtain the geometry and indicators of each province each year
map_data <- panel_for_map %>%
mutate(Year = as.integer(Year)) %>%
left_join(china_sf, by = c("Region" = "NAME_1")) |>
st_as_sf()
# 3. Build a ggplot object (without animation)
p <- ggplot(map_data) +
geom_sf(aes(fill = GDP_per_capita), color = "grey90", size = 0.2) +
scale_fill_viridis_c(
option   = "plasma",
direction= -1,
na.value = "white",
name      = "GDP_per_capita"
) +
labs(
title = 'China provincial GDPpc: {frame_time}',
subtitle = "Year：{frame_time}",
x = NULL, y = NULL
) +
theme_void(base_size = 14) +
theme(
plot.title    = element_text(hjust = 0.5, size = 18),
plot.subtitle = element_text(hjust = 0.5, size = 14)
)
# 4. Add animation effect: continuous transition by Year
p_anim <- p +
transition_time(Year) +
ease_aes('linear')
gif_path <- "china_gdp_per_capita.gif"
# 5. Render and save (GIF or MP4)
if(!file.exists(gif_path)){
anim <- animate(
p_anim,
nframes = length(unique(map_data$Year)) * 2,
fps     = 5,
width   = 800,
height  = 600,
renderer = gifski_renderer()
)
anim_save("china_gdp_per_capita.gif", animation = anim)
}else{message("Using cached GIF:",gif_path)}
knitr::include_graphics("china_gdp_per_capita.gif")
ols_base <- lm(GDP_per_capita_growth_rate ~ log_GDP_lag
+ ratio + urbanization_rate + Trade_share + Edu_share + growth_rate_of_fixed_asset,
data = panel_all %>% filter(Year==2020))
vif(ols_base)
#here a Robustness test is required.
df20 <- panel_all %>% filter(Year == 2020)
# 1. Absolute β convergence
lm1 <- lm(GDP_per_capita_growth_rate ~ log_GDP_lag, data = df20)
summary(lm1)
# 2. Conditional β convergence
lm2 <- lm(GDP_per_capita_growth_rate  ~ log_GDP_lag+
ratio+
urbanization_rate+
Trade_share+
Edu_share+
growth_rate_of_fixed_asset,
data = df20)
summary(lm2)
tidy(lm2) %>%
filter(term != "(Intercept)") %>%
ggplot(aes(x = estimate, y = term)) +
geom_point() +
geom_errorbarh(aes(xmin=estimate-1.96*std.error,
xmax=estimate+1.96*std.error),
height=0.2) +
labs(title="Conditional beta convergence regression coefficients for 2020",
x="Coefficient estimates", y="variable") +
theme_minimal()
library(ineq)
sigma_df <- panel_all %>%
group_by(Year) %>%
summarize(
sd_log_gdppc = sd(log(GDP_per_capita), na.rm = TRUE),
cv_gdppc = sd(GDP_per_capita, na.rm = TRUE) / mean(GDP_per_capita, na.rm = TRUE),
theil_gdppc = Theil(GDP_per_capita)
) %>%
pivot_longer(-Year, names_to = "metric", values_to = "value")
sigma_df <- sigma_df %>%
mutate(Year = as.numeric(as.character(Year)))
p3 <- ggplot(sigma_df, aes(x = Year, y = value)) +
geom_line(size = 1) +
facet_wrap(~ metric, scales = "free_y", ncol = 1, strip.position = "right") +
labs(
title = "Provincial GDP dispersion index changes by year",
x = "Year",
y = "Index value"
) +
theme_minimal(base_size = 14)
print(p3)
pdata <- pdata.frame(panel_all, index = c("Region","Year"))
fe_mod <- plm(GDP_per_capita_growth_rate ~ log_GDPpc_lag+
ratio+
urbanization_rate+
Trade_share+
Edu_share+
growth_rate_of_fixed_asset,
data   = pdata,
model  = "within",
effect = "twoways")
summary(fe_mod)
tidy(fe_mod, conf.int = TRUE) %>%
filter(term != "Intercept")
sigma_df <- panel_all %>%
group_by(Year) %>%
summarize(sd_logGDP = sd(log_GDP, na.rm=TRUE))
ggplot(sigma_df, aes(x=Year,y=sd_logGDP)) +
geom_line(size=1) +
labs(title="The standard deviation of the logarithmic GDP of each province changes with the year",
x="Year", y="sd") +
theme_minimal()
# 1. Read and project provincial boundaries
china_sf <- st_read("data/gadm41_CHN_shp/gadm41_CHN_1.shp") %>%
st_transform(4326)
panel_for_map <- panel_all|> select(Region,GDP_per_capita,Year,GDP_per_capita_growth_rate)
library(dplyr)
panel_for_map <-
panel_for_map |>
mutate(Region = as.character(Region)) |>
mutate(
Region=dplyr::recode(Region,
"Xinjiang"= "Xinjiang Uygur" ,
"Tibet" = "Xizang" ,
"Inner Mongolia"=  "Nei Mongol",
"Ningxia" ="Ningxia Hui",
.default          = Region
))
# 2. Combine panel data and spatial data to obtain the geometry and indicators of each province each year
map_data <- panel_for_map %>%
mutate(Year = as.integer(Year)) %>%
left_join(china_sf, by = c("Region" = "NAME_1")) %>%
st_as_sf()
# 3. Build a ggplot object (without animation)
p <- ggplot(map_data) +
geom_sf(aes(fill = GDP_per_capita), color = "grey90", size = 0.2) +
scale_fill_viridis_c(
option   = "plasma",
direction= -1,
na.value = "white",
name      = "GDP_per_capita"
) +
labs(
title = 'China provincial GDPpc: {frame_time}',
subtitle = "Year：{frame_time}",
x = NULL, y = NULL
) +
theme_void(base_size = 14) +
theme(
plot.title    = element_text(hjust = 0.5, size = 18),
plot.subtitle = element_text(hjust = 0.5, size = 14)
)
# 4. Add animation effect: continuous transition by Year
p_anim <- p +
transition_time(Year) +
ease_aes('linear')
gif_path <- "china_gdp_per_capita.gif"
# 5. Render and save (GIF or MP4)
if(!file.exists(gif_path)){
anim <- animate(
p_anim,
nframes = length(unique(map_data$Year)) * 2,
fps     = 5,
width   = 800,
height  = 600,
renderer = gifski_renderer()
)
anim_save("china_gdp_per_capita.gif", animation = anim)
}else{message("Using cached GIF:",gif_path)}
knitr::include_graphics("china_gdp_per_capita.gif")
# 1. Read and project provincial boundaries
china_sf <- st_read("data/gadm41_CHN_shp/gadm41_CHN_1.shp") %>%
st_transform(4326)
panel_for_map <- panel_all|> select(Region,GDP_per_capita,Year,GDP_per_capita_growth_rate)
library(dplyr)
panel_for_map <-
panel_for_map |>
mutate(Region = as.character(Region)) |>
mutate(
Region=dplyr::recode(Region,
"Xinjiang"= "Xinjiang Uygur" ,
"Tibet" = "Xizang" ,
"Inner Mongolia"=  "Nei Mongol",
"Ningxia" ="Ningxia Hui",
.default          = Region
))
# 2. Combine panel data and spatial data to obtain the geometry and indicators of each province each year
map_data <- panel_for_map %>%
mutate(Year = as.integer(Year)) %>%
left_join(china_sf, by = c("Region" = "NAME_1")) %>%
st_as_sf()
# 3. Build a ggplot object (without animation)
p <- ggplot(map_data) +
geom_sf(aes(fill = GDP_per_capita), color = "grey90", size = 0.2) +
scale_fill_viridis_c(
option   = "plasma",
direction= -1,
na.value = "white",
name      = "GDP_per_capita"
) +
labs(
title = 'China provincial GDPpc: {frame_time}',
subtitle = "Year：{frame_time}",
x = NULL, y = NULL
) +
theme_void(base_size = 14) +
theme(
plot.title    = element_text(hjust = 0.5, size = 18),
plot.subtitle = element_text(hjust = 0.5, size = 14)
)
# 4. Add animation effect: continuous transition by Year
p_anim <- p +
transition_time(Year) +
ease_aes('linear')
gif_path <- "china_gdp_per_capita.gif"
# 5. Render and save (GIF or MP4)
if(!file.exists(gif_path)){
anim <- animate(
p_anim,
nframes = length(unique(map_data$Year)) * 2,
fps     = 5,
width   = 800,
height  = 600,
renderer = gifski_renderer()
)
anim_save("china_gdp_per_capita.gif", animation = anim)
}else{message("Using cached GIF:",gif_path)}
knitr::include_graphics("china_gdp_per_capita.gif")
# 1. Read and project provincial boundaries
china_sf <- st_read("data/gadm41_CHN_shp/gadm41_CHN_1.shp") %>%
st_transform(4326)
panel_for_map <- panel_all|> select(Region,GDP_per_capita,Year,GDP_per_capita_growth_rate)
library(dplyr)
panel_for_map <-
panel_for_map |>
mutate(Region = as.character(Region)) |>
mutate(
Region=dplyr::recode(Region,
"Xinjiang"= "Xinjiang Uygur" ,
"Tibet" = "Xizang" ,
"Inner Mongolia"=  "Nei Mongol",
"Ningxia" ="Ningxia Hui",
.default          = Region
))
# 2. Combine panel data and spatial data to obtain the geometry and indicators of each province each year
map_data <- panel_for_map %>%
mutate(Year = as.integer(Year)) %>%
left_join(china_sf, by = c("Region" = "NAME_1")) %>%
st_as_sf()
# 3. Build a ggplot object (without animation)
p <- ggplot(map_data) +
geom_sf(aes(fill = GDP_per_capita), color = "grey90", size = 0.2) +
scale_fill_viridis_c(
option   = "plasma",
direction= -1,
na.value = "white",
name      = "GDP_per_capita"
) +
labs(
title = 'China provincial GDPpc: {frame_time}',
subtitle = "Year：{frame_time}",
x = NULL, y = NULL
) +
theme_void(base_size = 14) +
theme(
plot.title    = element_text(hjust = 0.5, size = 18),
plot.subtitle = element_text(hjust = 0.5, size = 14)
)
# 4. Add animation effect: continuous transition by Year
p_anim <- p +
transition_time(Year) +
ease_aes('linear')
gif_path <- "china_gdp_per_capita.gif"
# 5. Render and save (GIF or MP4)
if(!file.exists(gif_path)){
anim <- animate(
p_anim,
nframes = length(unique(map_data$Year)) * 2,
fps     = 5,
width   = 800,
height  = 600,
renderer = gifski_renderer()
)
anim_save("china_gdp_per_capita.gif", animation = anim)
}else{message("Using cached GIF:",gif_path)}
knitr::include_graphics("china_gdp_per_capita.gif")
# 1. Read and project provincial boundaries
china_sf <- st_read("data/gadm41_CHN_shp/gadm41_CHN_1.shp") %>%
st_transform(4326)
panel_for_map <- panel_all|> select(Region,GDP_per_capita,Year,GDP_per_capita_growth_rate)
library(dplyr)
panel_for_map <-
panel_for_map |>
mutate(Region = as.character(Region)) |>
mutate(
Region=dplyr::recode(Region,
"Xinjiang"= "Xinjiang Uygur" ,
"Tibet" = "Xizang" ,
"Inner Mongolia"=  "Nei Mongol",
"Ningxia" ="Ningxia Hui",
.default          = Region
))
# 2. Combine panel data and spatial data to obtain the geometry and indicators of each province each year
map_data <- panel_for_map %>%
mutate(Year = as.integer(Year)) %>%
left_join(china_sf, by = c("Region" = "NAME_1")) %>%
st_as_sf()
# 3. Build a ggplot object (without animation)
p <- ggplot(map_data) +
geom_sf(aes(fill = GDP_per_capita), color = "grey90", size = 0.2) +
scale_fill_viridis_c(
option   = "plasma",
direction= -1,
na.value = "white",
name      = "GDP_per_capita"
) +
labs(
title = 'China provincial GDPpc: {frame_time}',
subtitle = "Year：{frame_time}",
x = NULL, y = NULL
) +
theme_void(base_size = 14) +
theme(
plot.title    = element_text(hjust = 0.5, size = 18),
plot.subtitle = element_text(hjust = 0.5, size = 14)
)
# 4. Add animation effect: continuous transition by Year
p_anim <- p +
transition_time(Year) +
ease_aes('linear')
gif_path <- "china_gdp_per_capita.gif"
# 5. Render and save (GIF or MP4)
if(!file.exists(gif_path)){
anim <- animate(
p_anim,
nframes = length(unique(map_data$Year)) * 2,
fps     = 5,
width   = 800,
height  = 600,
renderer = gifski_renderer()
)
anim_save("china_gdp_per_capita.gif", animation = anim)
}else{message("Using cached GIF:",gif_path)}
knitr::include_graphics("china_gdp_per_capita.gif")
